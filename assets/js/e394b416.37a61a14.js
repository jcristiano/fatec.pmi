"use strict";(self.webpackChunkfatec_pmi=self.webpackChunkfatec_pmi||[]).push([[1429],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>g});var t=r(7294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),m=function(e){var a=t.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},p=function(e){var a=m(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(r),c=o,g=d["".concat(l,".").concat(c)]||d[c]||u[c]||n;return r?t.createElement(g,s(s({ref:a},p),{},{components:r})):t.createElement(g,s({ref:a},p))}));function g(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=c;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var m=2;m<n;m++)s[m]=r[m];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},68:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>m});var t=r(7462),o=(r(7294),r(3905));const n={id:"csharp-conceitos-variaveis-abordagem",title:"Vari\xe1veis",sidebar_position:99},s="Sobre vari\xe1veis",i={unversionedId:"csharp/001b-sobre-a-linguagem-csharp/csharp-conceitos-variaveis-abordagem",id:"csharp/001b-sobre-a-linguagem-csharp/csharp-conceitos-variaveis-abordagem",title:"Vari\xe1veis",description:"Na maioria dos programas que escrevemos, n\xe3o estamos interessados em apenas mostrar uma caixa de mensagens para o usu\xe1rio. Queremos tamb\xe9m armazenar e processar informa\xe7\xf5es.",source:"@site/docs/csharp/001b-sobre-a-linguagem-csharp/variaveis.md",sourceDirName:"csharp/001b-sobre-a-linguagem-csharp",slug:"/csharp/001b-sobre-a-linguagem-csharp/csharp-conceitos-variaveis-abordagem",permalink:"/fatec.pmi/docs/csharp/001b-sobre-a-linguagem-csharp/csharp-conceitos-variaveis-abordagem",draft:!1,editUrl:"https://github.com/jcristiano/fatec.pmi/tree/main/docs/csharp/001b-sobre-a-linguagem-csharp/variaveis.md",tags:[],version:"current",lastUpdatedAt:1695859219,formattedLastUpdatedAt:"Sep 28, 2023",sidebarPosition:99,frontMatter:{id:"csharp-conceitos-variaveis-abordagem",title:"Vari\xe1veis",sidebar_position:99},sidebar:"csharpSidebar",previous:{title:"Conceitos da Linguagem C#",permalink:"/fatec.pmi/docs/category/conceitos-da-linguagem-c"},next:{title:"M\xe9todos",permalink:"/fatec.pmi/docs/csharp/001b-sobre-a-linguagem-csharp/csharp-conceitos-metodos"}},l={},m=[{value:"Opera\xe7\xf5es com vari\xe1veis",id:"opera\xe7\xf5es-com-vari\xe1veis",level:2},{value:"Tipos primitivos",id:"tipos-primitivos",level:2},{value:"Armazenando textos em vari\xe1veis",id:"armazenando-textos-em-vari\xe1veis",level:2}],p={toc:m},d="wrapper";function u(e){let{components:a,...r}=e;return(0,o.kt)(d,(0,t.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sobre-vari\xe1veis"},"Sobre vari\xe1veis"),(0,o.kt)("p",null,"Na maioria dos programas que escrevemos, n\xe3o estamos interessados em apenas mostrar uma caixa de mensagens para o usu\xe1rio. Queremos tamb\xe9m armazenar e processar informa\xe7\xf5es."),(0,o.kt)("p",null,"Em um sistema banc\xe1rio, por exemplo, estar\xedamos interessados em armazenar o saldo de uma conta e o nome do correntista. Para armazenar esses dados, precisamos pedir para o C# reservar regi\xf5es de mem\xf3ria que ser\xe3o utilizadas para armazenar informa\xe7\xf5es. Essas regi\xf5es de mem\xf3ria s\xe3o conhecidas como vari\xe1veis."),(0,o.kt)("p",null,"As vari\xe1veis guardam informa\xe7\xf5es de um tipo espec\xedfico. Podemos, por exemplo, guardar um n\xfamero inteiro representando o n\xfamero da conta, um texto para representar o nome do correntista ou um n\xfamero real para representar o saldo atual da conta. Para utilizar uma vari\xe1vel, devemos primeiramente declar\xe1-la no texto do programa."),(0,o.kt)("p",null,"Na declara\xe7\xe3o de uma vari\xe1vel, devemos dizer seu tipo (inteiro, texto ou real, por exemplo) e, al\xe9m disso, qual \xe9 o nome que usaremos para referenci\xe1-la no texto do programa. Para declarar uma vari\xe1vel do tipo inteiro que representa o n\xfamero de uma conta, utilizamos o seguinte c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    int numeroDaConta;\n")),(0,o.kt)("p",null,'Repare no ";" no final da linha. Como a declara\xe7\xe3o de uma vari\xe1vel \xe9 um comando da linguagem C#, precisamos do ";" para termin\xe1-lo.'),(0,o.kt)("p",null,'Al\xe9m do tipo "int" (para representar inteiros), temos tamb\xe9m os tipos "double" e "float" (para n\xfameros reais), "string" (para textos), entre outros.'),(0,o.kt)("p",null,'Depois de declarada, uma vari\xe1vel pode ser utilizada para armazenar valores. Por exemplo, se estiv\xe9ssemos interessados em guardar o valor "1" na vari\xe1vel "numeroDaConta" que declaramos anteriormente, utilizar\xedamos o seguinte c\xf3digo:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    int numeroDaConta = 1;\n")),(0,o.kt)("p",null,'L\xea-se "numeroDaConta recebe 1". Quando, no momento da declara\xe7\xe3o da vari\xe1vel, sabemos qual ser\xe1 seu valor, podemos utilizar a seguinte sintaxe para declarar e atribuir o valor para a vari\xe1vel:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    double saldo = 100.0;\n")),(0,o.kt)("h2",{id:"opera\xe7\xf5es-com-vari\xe1veis"},"Opera\xe7\xf5es com vari\xe1veis"),(0,o.kt)("p",null,"Agora que j\xe1 sabemos como guardar informa\xe7\xf5es no programa, estamos interessados em executar opera\xe7\xf5es nesses valores. Pode ser interessante para um correntista saber qual ser\xe1 o saldo de sua conta ap\xf3s um saque de 10 reais. Para realizar essa opera\xe7\xe3o, devemos subtrair 10 reais do saldo da conta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    double saldo = 100.0;\n    saldo = saldo - 10.0;\n")),(0,o.kt)("p",null,'Nesse c\xf3digo, estamos guardando na vari\xe1vel "saldo" o valor da conta (100.0, saldo antigo) menos 10.0, ent\xe3o seu valor final ser\xe1 de 90.0. Da mesma forma que podemos subtrair valores, podemos tamb\xe9m fazer somas (com o operador "+"), multiplica\xe7\xf5es (operador "*") e divis\xf5es (operador "/").'),(0,o.kt)("p",null,"Podemos ainda guardar o valor do saque em uma vari\xe1vel:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"double saldo = 100.0;\ndouble valorDoSaque = 10.0;\nsaldo = saldo - valorDoSaque;\n")),(0,o.kt)("p",null,'Depois de realizar o saque, queremos mostrar para o usu\xe1rio qual \xe9 o saldo atual da conta. Para mostrarmos essa informa\xe7\xe3o, utilizaremos novamente o "MessageBox.Show":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'MessageBox.Show("O saldo da conta ap\xf3s o saque \xe9: " + saldo);\n')),(0,o.kt)("p",null,'Note que, no c\xf3digo do saque, estamos repetindo o nome da vari\xe1vel "saldo" dos dois lados da atribui\xe7\xe3o. Quando temos esse tipo de c\xf3digo, podemos utilizar uma abrevia\xe7\xe3o disponibilizada pelo C#, o operador "-=":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"double saldo = 100.0;\ndouble valorDoSaque = 10.0;\nsaldo -= valorDoSaque;\n")),(0,o.kt)("p",null,'Quando o compilador do C# encontra o "saldo -= valorDoSaque", essa linha \xe9 traduzida para a forma que vimos anteriormente: "saldo = saldo - valorDoSaque". Al\xe9m do "-=", temos tamb\xe9m os operadores "+=" (para somas), "*=" (para multiplica\xe7\xf5es) e "/=" (para divis\xf5es).'),(0,o.kt)("h2",{id:"tipos-primitivos"},"Tipos primitivos"),(0,o.kt)("p",null,"Vimos que no C# toda vari\xe1vel possui um tipo, utilizamos o ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," quando queremos armazenar valores inteiros e ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," para n\xfameros reais. Agora vamos descobrir quais s\xe3o os outros tipos de vari\xe1veis do C#."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,o.kt)("th",{parentName:"tr",align:null},"Tamanho"),(0,o.kt)("th",{parentName:"tr",align:null},"Valores Poss\xedveis"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"bool")),(0,o.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,o.kt)("td",{parentName:"tr",align:null},"true e false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"byte")),(0,o.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,o.kt)("td",{parentName:"tr",align:null},"0 a 255")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"sbyte")),(0,o.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,o.kt)("td",{parentName:"tr",align:null},"-128 a 127")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"short")),(0,o.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"-32768 a 32767")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ushort")),(0,o.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"0 a 65535")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"int")),(0,o.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"-2147483648 a 2147483647")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"uint")),(0,o.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"0 a 4294967295")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"long")),(0,o.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"-9223372036854775808L a 9223372036854775807L")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ulong")),(0,o.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"0 a 18446744073709551615")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"float")),(0,o.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"N\xfameros at\xe9 10 elevado a 38. Exemplo: 10.0f, 12.5f")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"double")),(0,o.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"N\xfameros at\xe9 10 elevado a 308. Exemplo: 10.0, 12.33")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"decimal")),(0,o.kt)("td",{parentName:"tr",align:null},"16 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"N\xfameros com at\xe9 28 casas decimais. Exemplo 10.991m, 33.333m")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"char")),(0,o.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"Caracteres delimitados por aspas simples. Exemplo: 'a', '\xe7', 'o'")))),(0,o.kt)("p",null,"Os tipos listados nessa tabela s\xe3o conhecidos como tipos primitivos ou value types da linguagem C#. Toda vez que atribu\xedmos um valor para uma vari\xe1vel de um tipo primitivo, o C# copia o valor atribu\xeddo para dentro da vari\xe1vel."),(0,o.kt)("p",null,"Agora que conhecemos os tipos primitivos da linguagem C#, vamos ver como eles interagem dentro de uma aplica\xe7\xe3o. Suponha que temos um c\xf3digo que declara uma vari\xe1vel do tipo inteiro e depois tenta copiar seu conte\xfado para uma vari\xe1vel long:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"int valor = 1;\nlong valorGrande = valor;\n")),(0,o.kt)("p",null,"Nesse caso, como o tamanho de uma vari\xe1vel ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," \xe9 maior do que o de uma vari\xe1vel ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", o C# sabe que podemos copiar o seu conte\xfado sem perder informa\xe7\xf5es, e, por isso, esse \xe9 um c\xf3digo que compila sem nenhum erro."),(0,o.kt)("p",null,"Agora vamos tentar copiar o ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," para uma vari\xe1vel do tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"short"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"int valor = 1;\nshort valorPequeno = valor;\n")),(0,o.kt)("p",null,"Nesse c\xf3digo, tentamos copiar o conte\xfado de uma vari\xe1vel maior para dentro de uma de tamanho menor. Essa c\xf3pia pode ser perigosa, pois o valor que est\xe1 na vari\xe1vel do tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," pode n\xe3o caber na vari\xe1vel ",(0,o.kt)("inlineCode",{parentName:"p"},"short"),", e, por isso, o compilador do C# gera um erro de compila\xe7\xe3o quando tentamos fazer essa convers\xe3o."),(0,o.kt)("p",null,"Para for\xe7armos o compilador do C# a fazer uma convers\xe3o perigosa, precisamos utilizar uma opera\xe7\xe3o do C# chamada casting, especificando para qual tipo queremos fazer a convers\xe3o."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"int valor = 1;\nshort valorPequeno = (short)valor;\n")),(0,o.kt)("h2",{id:"armazenando-textos-em-vari\xe1veis"},"Armazenando textos em vari\xe1veis"),(0,o.kt)("p",null,"Al\xe9m dos tipos primitivos, o C# tamb\xe9m possui um tipo espec\xedfico para armazenar textos. No tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", podemos guardar qualquer valor que seja delimitado por aspas duplas, por exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'string mensagem = "Minha Mensagem";\nMessageBox.Show(mensagem);\n')),(0,o.kt)("p",null,"Podemos juntar o valor de duas vari\xe1veis do tipo string utilizando o operador ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," da linguagem. A soma de strings \xe9 uma opera\xe7\xe3o conhecida como concatena\xe7\xe3o."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'string mensagem = "Ol\xe1 ";\nstring nome = "aluno";\nMessageBox.Show(mensagem + nome);\n')),(0,o.kt)("p",null,'Esse c\xf3digo imprime o texto "Ol\xe1 victor" em uma caixa de mensagens. Podemos utilizar a concatena\xe7\xe3o para adicionar o conte\xfado de qualquer vari\xe1vel em uma string:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'int idade = 25;\nstring mensagem = "sua idade \xe9: " + idade;\nMessageBox.Show(mensagem);\n')),(0,o.kt)("p",null,"Esse segundo c\xf3digo imprime o texto ",(0,o.kt)("strong",{parentName:"p"},'"sua idade \xe9: 25"'),"."))}u.isMDXComponent=!0}}]);